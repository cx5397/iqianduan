[{"categories":["编码"],"content":"ascii 转 base64 的规则\nWhen you have some binary data that you want to ship across a network, you generally don\u0026rsquo;t do it by just streaming the bits and bytes over the wire in a raw format. Why? because some media are made for streaming text. You never know \u0026ndash; some protocols may interpret your binary data as control characters (like a modem), or your binary data could be screwed up because the underlying protocol might think that you\u0026rsquo;ve entered a special character combination (like how FTP translates line endings). So to get around this, people encode the binary data into characters. Base64 is one of these types of encodings. Why 64? Because you can generally rely on the same 64 characters being present in many character sets, and you can be reasonably confident that your data\u0026rsquo;s going to end up on the other side of the wire uncorrupted\n标准 ASCII 码，使用 7 位二进制数 2（2^7=128,剩下的 1 位二进制为 0）来表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符，码表如下\nbase64 使用大写和小写字母，数字 0 到 9，+ /共 64 个字符编码，码表如下\n那么怎么将 ascii 字符\u0026rsquo;ab',转化为 base64 码，规则是怎么样的呢？\n我们在 ascii 码表分别找到 a，b 的码值为 97,98，用 2 进制表示为 1100001，1100010(可以使用方法 97..toString(2)得到)，不足 8 位的在前面补 0，那么‘ab’二进制表示就是 01100001 01100010\nbase64 只有 64 个字符，只需要 6（2^6=64）位就可以容纳，那么我们可以分割成 011000 010110 0010，① 后面不足 6 位在后面补 0，于是就成为了 011000 010110 001000，我们得出他们的 10 进制分别为 24,22,8（可以使用 parseInt(11000,2)计算出）\n通过比对 base64 码，我们分别找到 24,22,8 对应的字符为 Y,W,I\n根据规定转化后的长度需要是 4 的倍数，② 不足部分在后面加‘=’，于是变成了 YWI=,我们通过 btoa(\u0026lsquo;ab\u0026rsquo;)方法验证，结果正确\nab 字符实际有效占用的空间是 27=14 位（标准的 ascii 只有 7 位有效的)，转化为 base64 后，48=32 位（这里加了个=，多了 8 位），因此 base64 编码后会增加传输量，具体增加多少取决于 ① ② 处\n","date":"2021-12-16","img":"","permalink":"/posts/ascii2base64/","series":["原理"],"tags":["base64","ascii"],"title":"Ascii转base64"},{"categories":["部署"],"content":"The world’s fastest framework for building websites\n前言 同事问我，你有什么梦想，我想了半天没有回答出来，思来想去，对于梦想，大多数都跟钱有关，话说没有钱解决不了的问题，解决不了那就是钱不够，那么我们有没有什么东西是很重要，又是钱买不到的，或者不容易买到的呢\n健康的身体，话说身体是革命的本钱，是所有的基础，花时间去锻炼身体，健康营养的饮食，良好愉悦的心情，是保持健康的最低条件\n一技之长，人生的价值在于被利用价值，人不可能做好很多事，于是根据自己能力选择合适的事就很重要，做一行爱一行，拥有难以替代的特长，是生存的保障\n对于未来的希望，未来很漫长，需要有期待，有诗，有远方\n能够陪伴你的好友，人是群体动物，社会关系构筑了现代文明体系，每个人都很忙，在快节奏的城市，能够有交集那也是难得的缘分\n2022 决定好好写博客，促使自己学习，变的更好(这也是建站目的)\n域名申请 域名我使用的阿里云的万网 购买的 10 年期限，199 人民币，也可以不买域名，买域名只是让网站地址更加好记忆，看起来高大上一点，免费静态托管网站提供的地址太长不友好\n域名买下来后需要在购买商那里完成实名信息登记\nicp 备案与免费静态服务器 根据国家规定，国内的网站都需要备案，备案就是企业或个人提交建站相关信息到对应服务商，用于国家监管，服务器在国外就不需要备案\n找到的免费的静态托管网站有 gitee 和 github，gitee 在国内需要备案，不提供个性化域名服务(收费版本可以)，但是访问速度会快于 github，为了使用个性化域名，所以我选择了 github\nhugo 工程创建与编译  下载 hugo 软件 生成网站 将解压的可执行文件路径 bin 目录加入环境变量 path 新开 cmd 命令窗口，创建工程  1hugo new site myblog 2cd myblog 3新建目录themes 将hugo-theme-bootstrap 下载下来放在 themes 目录下 在 myblog 工程根目录下执行下列命令  1cp -a themes/hugo-theme-bootstrap/exampleSite/* . 2//如果你使用的是 Windows，请改用 xcopy .\\themes\\hugo-theme-bootstrap\\exampleSite /E 运行工程 hugo server --watch 编译文件到 docs 目录下 hugo -d docs 将整个工程提交到 github 仓库中  我们手动编译，有点辛苦，我们可以用 github Actions 自动构建，来优化流程，这样每次修改，就会自动编译，部署  配置 settings pages 项,部署分支改为 gh-pages,目录选择/root,工作流编译的代码会放在这里 配置 Actions 项，点击最上面的set up a workflow yourself， 将下面的工作流代码复制进.github/workflows/你的分支名.yml，然后 start commit  1# This is a basic workflow to help you get started with Actions 2name: CI 3# Controls when the workflow will run 4 5on: 6# Triggers the workflow on push or pull request events but only for the main branch 7push: 8branches: [main] 9pull_request: 10branches: [main] 11# Allows you to run this workflow manually from the Actions tab 12workflow_dispatch: 13# A workflow run is made up of one or more jobs that can run sequentially or in parallel 14jobs: 15# This workflow contains a single job called \u0026#34;build\u0026#34; 16build: # The type of runner that the job will run on 17runs-on: ubuntu-latest 18 # Steps represent a sequence of tasks that will be executed as part of the job 19 steps: 20 # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it 21 - uses: actions/checkout@v2 22 23 # Runs a single command using the runners shell 24 - name: Run a one-line script 25 run: echo Hello, world! 26 27 - name: Setup Hugo 28 uses: peaceiris/actions-hugo@v2 29 with: 30 hugo-version: \u0026#34;0.90.1\u0026#34; 31 # extended: true 32 33 - name: Build 34 run: hugo -d docs 35 36 # 将main分支打包后的docs文件夹内容放到gh-pages分支上 37 - name: Deploy 38 uses: peaceiris/actions-gh-pages@v3 39 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} 40 with: 41 github_token: ${{ secrets.GITHUB_TOKEN }} 42 publish_dir: ./docs 提交代码后，再次进入 Actions,你就可以看到 workflows 运行情况，点击具体的任务，可以重新跑这个任务，查看 workflow 具体的执行步骤  域名解析与 github page 设置  在域名服务商将域名 CNAME 到 github 服务器，格式为 github 用户名.github.io（@记录为不带 www 的域名解析）  点开刚刚提交到的 github 仓库，进入 settings 目录 找到 GitHub Pages,点击 Check it out here 填写代码所在分支，选择/docs 目录，点保存，Custom domain 填写自己刚刚解析的域名地址，点保存  ","date":"2021-12-15","img":"","permalink":"/posts/buildwebsite/","series":["工具"],"tags":["hugo","hugo-theme-bootstrap","github page"],"title":"使用hugo搭建博客"},{"categories":["版本管理工具"],"content":"常用 git 命令，和相关产品的配置\ngit 命令 代码拉取  git 配置用户名邮箱 $ git config --global user.name \u0026quot;John Doe\u0026quot; $ git config --global user.email johndoe@example.com 克隆仓库 $ git clone git://github.com/schacon/ticgit.git git clone 只能 clone 远程库的 master 分支，无法 clone 所有分支，git checkout -b develop origin/develop，作用是 checkout 远程的 develop 分支，在本地起名为 develop 分支，并切换到本地的 develop 分支  branch 操作  创建分支 git branch 分支名;git checkout分支名，git checkout -b 分支名 删除某分支 git branch -d 分支名 查看本地分支情况 git branch 查看远程分支 git branch -r 分支重命名 git branch -m oldname newname 将 test 分支合并进当前分支 git merge test  tag 操作  查看 git tag 给当前 commit 添加 tag git tag -a tagname -m \u0026quot;comment\u0026quot; or git tag tagname 删除 tag git tag -d tagname 提交 tag git push origin tagname or once push all git push origin --tags  代码状态  显示有变更的文件 git status  显示当前分支的版本历史 git log [--pretty=oneline] 显示历史操作记录 git reflog 查看修改情况 git diff   代码还原  语法 git reset －－[mixed 默认|hard|soft] commit 号|HEAD~n|HEAD^^^|HEAD^ hard－\u0026gt;add 之前文件也还原(回到 1) mixed－\u0026gt;add 之前(回到 2) soft－\u0026gt;commit 之前，保留 add(回到 3) \u0026lt;\u0026ndash;1-modify\u0026ndash;2\u0026ndash;add\u0026ndash;3\u0026ndash;commit\u0026ndash;4\u0026ndash;\u0026gt; 优先级为:从暂存区,当前最后一次 commit,拿此文件替换工作区此文件 git checkout --文件名  提交代码  git add [file|.|-A]  git commit -a --amend (修改上一次 commit 信息) git commit -m “注释” (添加本次 commit 的注释) 更新远程代码  git pull origin branchname 提交代码 git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt; or samename git push origin branchname (在解决完冲突后，重新 add commit push）  gitlab 配置  打开 git bash 窗口 查看是否已经存在 SSH key pair cat ~/.ssh/id_rsa.pub 存在就跳过生成步骤 4 生成 ssh key 命令： ssh-keygen -t rsa -C \u0026ldquo;your email address\u0026rdquo; ssh 公钥 id_rsa.pub 拷贝到 gitlab\u0026rsquo;右上角\u0026gt;头像\u0026gt;设置\u0026gt;ssh 密钥' 官方相关说明   github 配置  github 配置类似 gitlab 配置 ssh 公钥 id_rsa.pub 可以共用，不需要重新生成(哪怕 your email address 不一样也可以) 通信凭证在 2021.8 月禁用了 account passwords 方式 默认方式由 ssh 变为了 https token ，代码仓库地址默认是 https 而不再是 ssh  按照原来 ssh 配置后，执行ssh -T git@github.com 提示 You\u0026rsquo;ve successfully authenticated 则凭证正确 复制 ssh 地址， git clone 代码(注意要选择 ssh 地址，因为配置的凭证是 ssh 的),或者用 https 地址，配置新的 https token 认证方式  tapd 与 gitlab 关联  tapd 文档相关说明  ","date":"2021-12-15","img":"","permalink":"/posts/git/","series":["工具"],"tags":["git","gitlab","tapd","github"],"title":"Git相关使用"},{"categories":null,"content":" 主要用于书写前端技术博客和记录生活点滴 本博客代码托管于 github page 使用了 hugo-theme-bootstrap 博客主题 爱前端(iqianduan)首次部署于 2021-12-14  ","date":"2019-02-28","img":"","permalink":"/about/","series":null,"tags":null,"title":"关于"},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/faq/","series":null,"tags":null,"title":"Frequently Asked Questions"},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/offline/","series":null,"tags":null,"title":"Offline"},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/contact/","series":null,"tags":null,"title":"联系我们"}]